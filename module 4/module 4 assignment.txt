1.  What is File function in python? What is keywords to create and write file.

-> File handling in Python is an important part of any web application. Python offers several functions for opening, reading, creating , writing, closing, or deleting files in python.


2.  Write a Python program to read an entire text file.

-> file=open("T2.txt","r")
print(file.read())
file.close()


3.  Write a Python class named Rectangle constructed by a length and width and a method which will compute the area of a rectangle

-> class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def compute_area(self):
        area = self.length * self.width
        print("Rectangle Area is : ",area)       


length = int(input("Enter Rectabgle Length is : "))
width = int(input("Enter Rectangle Width is : "))
rectangle = Rectangle(length,width)
rectangle.compute_area()


4. Write a Python class named Circle constructed by a radius and two methods which will compute the area and the perimeter of a circle.

-> import math

class Circle :
    
    def __init__(self,redius) :
        self.redius = redius
        
    def area(self) :
        area =math.pi * self.redius ** 2
        print("Circle Area is : ",area)
        
    def perimeter(self) :
        pera = 2 * math.pi * self.redius
        print("Circle Perimeter is : ",pera)
        
redius = int(input("Enter Circle redius : "))
circle = Circle(redius)
circle.area()
circle.perimeter()  


5. Write a Python program to append text to a file and display the text.

-> class file() :
    def append_text_to_file(self,file_path, text_to_append):
        try:
                file =  open(file_path, 'a') 
                file.write(text_to_append)
                print("Text appended to the file successfully.")
            
        except FileNotFoundError:
            print("File not found.")
        
        except Exception as e:
            print("An error occurred:", e)

    def display_file_contents(self,file_path):
        try:
                file = open(file_path, 'r') 
                file_contents = file.read()
                print("File contents:")
                print(file_contents)
            
        except FileNotFoundError:
            print("File not found.")
        
        except Exception as e:
            print("An error occurred:", e)


file_path = "C:\\Users\\sarthak saraniya\\Desktop\\python\\python23\\Assignment\\Module – 4 (Advance python programming)\\file.txt"
text_to_append = "\nThis is the appended text."
f = file()
f.append_text_to_file(file_path, text_to_append)
f.display_file_contents(file_path)


6. Write a Python program to read first n lines of a file.

-> def read_first_n_lines(file_path, n):
    try:
            file = open(file_path, 'r') 
            lines = file.readlines()
            for i in range(min(n, len(lines))):
                print(lines[i].strip())
                
    except FileNotFoundError:
        print("File not found.")
        
    except Exception as e:
        print("An error occurred:", e)


file_path = "C:\Users\HP\OneDrive\Desktop\python\tops assignment\TOPS-assignment\module 4\T1.txt" 
n = int(input("How many lines user want to read : "))  
read_first_n_lines(file_path, n)


7. Write a Python program to read last n lines of a file. 

-> def read_last_n_lines(file_path, n):
    try:
            file = open(file_path, 'r') 
            lines = file.readlines()
            last_n_lines = lines[-n:]
            for line in last_n_lines:
                print(line.strip())
                
    except FileNotFoundError:
        print("File not found.")
        
    except Exception as e:
        print("An error occurred:", e)


file_path = "C:\Users\HP\OneDrive\Desktop\python\tops assignment\TOPS-assignment\module 4\T1.txt"   
n = int(input("Enter how many line you want to Read : "))
read_last_n_lines(file_path, n)


8. Write a Python program to read a file line by line and store it into a list.

-> def line_store_list(file_path) :
    
    try :
        file = open(file_path,'r')
        line = file.readlines()
        print("Contents of the file stored in a list : ",line)
        
    except FileNotFoundError :
        print("File not found")
        
    except Exception as e :
        print("An error occurred:", e)
        
file_path = "C:\Users\HP\OneDrive\Desktop\python\tops assignment\TOPS-assignment\module 4\T1.txt"
line = line_store_list(file_path)


10. Write a Python program to count the number of lines in a text file.

-> def line_count(file_path) :
    
    try :
        file = open(file_path,'r')
        line_counts = sum(1 for line in file)
        return line_counts
    
    except FileNotFoundError :
        print(f"Error: File '{file_path}' not found.")
        return []
    
file_path = "C:\Users\HP\OneDrive\Desktop\python\tops assignment\TOPS-assignment\module 4\T1.txt"
line_counts = line_count(file_path)
print("Number of lines in file is : ",line_counts)


11. Write a Python program to count the frequency of words in a file.

-> def count_word_frequency(file_path):
    word_freq = {}
    with open(file_path, 'r') as file:
        for line in file:
            words = line.strip().split()
            for word in words:
                word_freq[word] = word_freq.get(word, 0) + 1
    return word_freq

def main():
    file_path ="C:\Users\HP\OneDrive\Desktop\python\tops assignment\TOPS-assignment\module 4\T1.txt"
    word_freq = count_word_frequency(file_path)
    
    for word, frequency in word_freq.items():
        print(f'{word}: {frequency}')

if __name__ == "__main__":
    main()


12. Write a Python program to write a list to a file.

-> def write_list_to_file(file_path, data_list):
    with open(file_path, 'w') as file:
        for item in data_list:
            file.write(str(item) + '\n')
            
file_path ="C:\Users\HP\OneDrive\Desktop\python\tops assignment\TOPS-assignment\module 4\T1.txt"
data_list = ['apple', 'banana', 'cherry', 'date']
write_list_to_file(file_path,data_list)

print("The list has been written to : ",file_path)


13. Write a Python program to copy the contents of a file to another file.

-> def copy_file(source_path, destination_path):
    try:
        with open(source_path, 'r') as source_file:
            with open(destination_path, 'w') as destination_file:
                for line in source_file:
                    destination_file.write(line)
        print(f'Contents copied from {source_path} to {destination_path} successfully.')
    except FileNotFoundError:
        print('File not found. Please check the file paths.')
        
source_path = "C:\Users\HP\OneDrive\Desktop\python\tops assignment\TOPS-assignment\module 4\T1.txt"
destination_path ="C:\Users\HP\OneDrive\Desktop\python\tops assignment\TOPS-assignment\module 4\T2.txt"
copy_file(source_path,destination_path)


13. Explain Exception handling? What is an Error in Python?

-> Exception handling : If you have some suspicious code that may raise a exception, you can defend your program by placing the suspicious code in a try: block. After the try: block, include an except: statement, followed by a block of code which handles the problem as elegantly as possible.

 Error : Errors are the problems in a program due to which the program will stop the execution.


14. How many except statements can a try-except block have? Name Some built-in exception classes.

->  At least one except statement is required.
    Name of buit-in exception classes :  Arithmetic Error, Exception, Name Error Index Error, Attribute Error, etc....

15. When will the else part of try-except-else be executed?

-> The else part is executed when no exception occurs. When Else was executed if any condition is not satisfied in program.....


16. Can one block of except statements handle multiple exception?

-> Yes, a single block of except statements in Python can handle multiple exceptions. 
	
         Example:--
	try:
	    x = 10 / 0
             y = int("abc")

        except (ZeroDivisionError, ValueError) as e:
		   print("An error occurred:", str(e))


17. When is the finally block executed?

-> Finally block is always executed whether an exception is handled or not. Therefore, it contains all the necessary statements that need to be printed regardless of the exception occurs or not.


18. What happens when „1‟== 1 is executed?

-> It simply evaluates to False and does not raise any exception.


21. What are oops concepts?

-> An object-oriented paradigm is to design the program using classes and objects. The object is related to real-word entities such as book, house, pencil, etc. The oops concept focuses on writing the reusable code. It is a widespread technique to solve the problem by creating objects.

        Python OOP Concepts : 
	(1)Class
	(2)Object
	(3)Encapsulation	
	(4)Inheritance
      	(5)Polymorphism
	(6)Abstraction
	(7)Constraction


26. What is Instantiation in terms of OOP terminology?

-> In OOP, instantiation is the process of creating instances (objects) of a class,allowing you to work with specific,individual entities based on the defined class structure.


27. What is used to check whether an object o is an instance of class A?

-> In Python, you can use the isinstance() function to check whether an object is an instance of a particular class. 
   The isinstance() function returns True if the object is an instance of the specified class or a tuple of classes, and False otherwise.

   Example:--
	class B:
    		pass	
	
	obj = B()
	result = isinstance(obj, B)
	print(result)


28. What relationship is appropriate for Course and Faculty?

->  Association relationship


29. What relationship is appropriate for Student and Person?

-> 	Inheritance relationship